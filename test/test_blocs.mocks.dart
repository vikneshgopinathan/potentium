// Mocks generated by Mockito 5.3.2 from annotations
// in potentium_test/test/test_blocs.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:potentium_test/repository/models/album_model.dart' as _i4;
import 'package:potentium_test/repository/models/images_model.dart' as _i5;

import 'test_blocs.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MockRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockRepository extends _i1.Mock implements _i2.MockRepository {
  MockMockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.AlbumModel>> fetchAlbums() => (super.noSuchMethod(
        Invocation.method(
          #fetchAlbums,
          [],
        ),
        returnValue: _i3.Future<List<_i4.AlbumModel>>.value(<_i4.AlbumModel>[]),
      ) as _i3.Future<List<_i4.AlbumModel>>);
  @override
  _i3.Future<List<_i5.ImagesModel>> fetchImages(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchImages,
          [id],
        ),
        returnValue:
            _i3.Future<List<_i5.ImagesModel>>.value(<_i5.ImagesModel>[]),
      ) as _i3.Future<List<_i5.ImagesModel>>);
  @override
  _i3.Future<List<_i4.AlbumModel>> fetchAlbumsbySearch(String? title) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAlbumsbySearch,
          [title],
        ),
        returnValue: _i3.Future<List<_i4.AlbumModel>>.value(<_i4.AlbumModel>[]),
      ) as _i3.Future<List<_i4.AlbumModel>>);
}
